## this workflow is used for dev environments to add new product configurations and promote up

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - '*'
      - '!prod'
    paths-ignore:
      - "**/*.md"
      - ".gitignore"


name: DeployFeature

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: "!contains(github.event.commits[0].message, '[skip ci]')"

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - name: Install Dependencies
      run: |
        sh ci_tools/install_dependencies.sh
        echo "ended install"
        echo ${{ github.event_name }}
      with:
        KUBE_CONFIL_YAML: ${{ secrets.KUBE_CONFIG_YAML }}
      # if new branch, postman collection to create myping env
    - name: Create MyPing Env
      # if: "contains( github.event_name , 'create')"
      # if will be handled in postman. tricky to manage from github actions. 
      run: ci_tools/run_postman.sh k8s/createmyping.yaml
      env:
        ## These environment variables will be obfuscated in workflow logs.
        ## must use standard shell format
        P1_ADMIN_ENV_ID: ${{ secrets.P1_ADMIN_ENV_ID}}
        P1_ADMIN_ORG_ID: ${{ secrets.P1_ADMIN_ORG_ID}}
        P1_ADMIN_ENV_ROLE_ID: ${{ secrets.P1_ADMIN_ENV_ROLE_ID}}
        PF_ADMIN_WORKER_ID: ${{ secrets.PF_ADMIN_WORKER_ID}}
        PF_ADMIN_WORKER_SECRET: ${{ secrets.PF_ADMIN_WORKER_SECRET}}
        SLACK_WEBHOOK_ID: ${{ secrets.SLACK_WEBHOOK_ID }}
      # eval sha of profile dirs and deploy chart
    - name: Deploy Changes
      env:
        P1_ADMIN_ENV_ID: ${{ secrets.P1_ADMIN_ENV_ID}}
        PF_ADMIN_WORKER_ID: ${{ secrets.PF_ADMIN_WORKER_ID}}
        PF_ADMIN_WORKER_SECRET: ${{ secrets.PF_ADMIN_WORKER_SECRET}}
        SPLUNK_PASSWORD: ${{ secrets.SPLUNK_PASSWORD}}
        SPLUNK_HEC_TOKEN: ${{ secrets.SPLUNK_HEC_TOKEN}}
      run: |
        export REF=$(echo $GITHUB_REF | sed -e "s#refs/heads/##g")
        sh ci_tools/helm_deploy.sh
    - name: Integration Test
      run: ci_tools/run_postman.sh k8s/integrationtest.yaml
    - name: Environment Info
      run: echo "Your environment is ready, check Slack!"
        # set -a
        # source ci_tools/ci_tools.lib.sh
        # kubectl get ing -l app.kubernetes.io/instance=${RELEASE} -o=custom-columns="NAME:.metadata.name,HOST:.spec.rules[*].host"

    - name: pull-request-action
      uses: vsoch/pull-request-action@1.0.12
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PULL_REQUEST_BRANCH: "prod"
        PASS_IF_EXISTS: "yes"
        PASS_ON_ERROR: "yes"
